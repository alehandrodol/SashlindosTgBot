# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import logging
import random
from datetime import datetime

# –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import pytz
from sqlalchemy import select, and_
from vk_api.vk_api import VkApiMethod

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from database.models import User, UserStats

MOSCOW_TZ = pytz.timezone('Europe/Moscow')

class VKHandler:
    GROUP_ID = '-209871225'
    ALBUM_ID = '282103569'

    def __init__(self, vk: VkApiMethod):
        self._vk = vk

    def _get_photo_url(self, photo: dict) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞."""
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–∏–ø 'o' (–æ—Ä–∏–≥–∏–Ω–∞–ª), –µ—Å–ª–∏ –Ω–µ—Ç - –±–µ—Ä–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ —à–∏—Ä–∏–Ω–µ
        photo_url = max(photo['sizes'], key=lambda x: x['width'])['url']
            
        return photo_url

    async def check_user_limit(self, session, user_id: int, chat_id: int) -> tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É —Å–µ–≥–æ–¥–Ω—è."""
        query = (
            select(UserStats)
            .join(User)
            .where(
                and_(
                    User.user_id == user_id,
                    User.chat_id == chat_id
                )
            )
        )
        result = await session.execute(query)
        stats = result.scalar_one_or_none()
        
        if not stats:
            return False, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!"
        
        today = datetime.now(MOSCOW_TZ).date()
        
        if stats.last_picture_date == today:
            return False, "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É —Å–µ–≥–æ–¥–Ω—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ üòâ"
            
        stats.last_picture_date = today
        await session.commit()
        
        return True, ""

    async def get_random_photo(self, session, user_id: int, chat_id: int, check_limit: bool = False) -> tuple[str | None, str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–∑ –∞–ª—å–±–æ–º–∞ –≥—Ä—É–ø–ø—ã."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ check_limit=True
        if check_limit:
            can_use, error_message = await self.check_user_limit(session, user_id, chat_id)
            if not can_use:
                return None, error_message

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –∞–ª—å–±–æ–º–∞
            size = self._vk.photos.get_albums(owner_id=self.GROUP_ID, album_ids=self.ALBUM_ID)['items'][0]['size']

            if size == 0:
                return None, "–í –∞–ª—å–±–æ–º–µ –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π üò¢"
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
            photo = self._vk.photos.get(
                owner_id=self.GROUP_ID,
                album_id=self.ALBUM_ID,
                count=1,
                offset=random.randint(0, size - 1)
            )['items'][0]
            
            # –ü–æ–ª—É—á–∞–µ–º URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            photo_url = self._get_photo_url(photo)
            logging.info(f"–ü–æ–ª—É—á–µ–Ω URL —Ñ–æ—Ç–æ: {photo_url}")
            
            return photo_url, None
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {e}"
            logging.error(error_msg)
            return None, error_msg 