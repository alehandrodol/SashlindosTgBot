import pytz
import random
import logging

from aiogram import Bot
from datetime import datetime
from sqlalchemy import select, and_

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

from .daily import DailyHandler
from .cleanup import CleanupHandler
from database.database import Database
from database.models import Chat, SchedulerTask, TaskType

MOSCOW_TZ = pytz.timezone('Europe/Moscow')

class Scheduler:
    _bot: Bot
    _db: Database 
    _scheduler: AsyncIOScheduler
    _daily_handler: DailyHandler
    _cleanup_handler: CleanupHandler

    def __init__(self, bot: Bot, db: Database):
        self._bot = bot
        self._db = db
        self._scheduler = AsyncIOScheduler(timezone=MOSCOW_TZ)
        self._daily_handler = DailyHandler(bot, db)
        self._cleanup_handler = CleanupHandler(db)
    
    async def schedule_daily_master(self, chat_id: int):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∏–¥–æ—Ä–æ–≤ –≤ —á–∞—Ç–µ."""
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è
            hour = random.randint(9, 21)
            minute = random.randint(0, 59)
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è
            now = datetime.now(MOSCOW_TZ)
            next_time = now.replace(
                day=now.day + 1,
                hour=hour,
                minute=minute,
                second=0,
                microsecond=0
            )
            
            async for session in self._db.get_session():
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
                new_task = SchedulerTask(
                    chat_id=chat_id,
                    task_type=TaskType.DAILY_MESSAGE,
                    scheduled_time=next_time,
                    is_completed=False
                )
                session.add(new_task)
                await session.commit()
                
                # –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                await self._schedule_task(new_task)
            
            logging.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ {chat_id} –Ω–∞ {next_time}")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")
    
    async def check_missed_dailies(self, session):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        try:
            now = datetime.now(MOSCOW_TZ)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏, –≤—Ä–µ–º—è –∫–æ—Ç–æ—Ä—ã—Ö —É–∂–µ –ø—Ä–æ—à–ª–æ
            query = select(SchedulerTask).where(
                and_(
                    SchedulerTask.is_completed == False,
                    SchedulerTask.scheduled_time <= now,
                    SchedulerTask.task_type == TaskType.DAILY_MESSAGE
                )
            )
            
            result = await session.execute(query)
            missed_tasks: list[SchedulerTask] = result.scalars().all()
            
            for task in missed_tasks:
                await self._bot.send_message(
                    task.chat_id,
                    "–ò–∑–≤–∏–Ω–∏—Ç–µ, –±—ã–ª–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º! ü§ñ"
                )
                
                # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
                task.is_completed = True
                
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await self.schedule_daily_master(task.chat_id)
                
            await session.commit()
            
            if missed_tasks:
                logging.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(missed_tasks)} –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

    async def _restore_pending_tasks(self, session) -> int:
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏."""
        now = datetime.now(MOSCOW_TZ)
        task_query = select(SchedulerTask).where(
            and_(
                SchedulerTask.is_completed == False,
                SchedulerTask.scheduled_time > now,
                SchedulerTask.task_type == TaskType.DAILY_MESSAGE
            )
        )
        result = await session.execute(task_query)
        pending_tasks: list[SchedulerTask] = result.scalars().all()
        
        for task in pending_tasks:
            await self._schedule_task(task)
            
        return len(pending_tasks)

    async def _schedule_task(self, task: SchedulerTask):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—É—é –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ."""
        scheduled_time = task.scheduled_time.astimezone(MOSCOW_TZ)
        self._scheduler.add_job(
            self._daily_handler.send_daily_message,
            trigger=CronTrigger(
                year=scheduled_time.year,
                month=scheduled_time.month,
                day=scheduled_time.day,
                hour=scheduled_time.hour,
                minute=scheduled_time.minute
            ),
            args=[task.chat_id, task.id],
            id=f'daily_message_{task.chat_id}',
            replace_existing=True,
            kwargs={'scheduler': self}
        )
        logging.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ {task.id} –¥–ª—è —á–∞—Ç–∞ {task.chat_id} –Ω–∞ {scheduled_time}")

    async def _setup_active_chats(self, session):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –±–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞—á."""
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        active_tasks = (
            select(SchedulerTask)
            .where(
                and_(
                    SchedulerTask.is_completed == False,
                    SchedulerTask.task_type == TaskType.DAILY_MESSAGE
                )
            )
            .subquery()
        )

        # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å —Å LEFT JOIN
        query = (
            select(Chat, active_tasks)
            .outerjoin(
                active_tasks,
                and_(
                    Chat.chat_id == active_tasks.c.chat_id,
                )
            )
            .where(
                and_(
                    Chat.is_active == True,
                    active_tasks.c.id == None  # –≤—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Ç—ã –±–µ–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
                )
            )
        )
        
        result = await session.execute(query)
        chats_without_tasks = result.scalars().all()
        
        for chat in chats_without_tasks:
            await self.schedule_daily_master(chat.chat_id)
            logging.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —á–∞—Ç–∞ {chat.chat_id}")

    def _setup_cleanup_job(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏."""
        self._scheduler.add_job(
            self._cleanup_handler.cleanup_old_tasks,
            trigger=CronTrigger(hour=3, minute=0),
            id='cleanup_old_tasks',
            replace_existing=True
        )

    async def setup_jobs(self, session):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        try:
            # 1. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏
            restored_count = await self._restore_pending_tasks(session)
            
            # 2. –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤
            await self._setup_active_chats(session)
            
            # 3. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏
            self._setup_cleanup_job()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            self._scheduler.start()
            logging.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {restored_count} –∑–∞–¥–∞—á")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

    async def setup_chat_job(self, chat_id: int):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞"""
        try:
            await self.schedule_daily_master(chat_id)
            logging.info(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")

    def get_scheduled_jobs(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
        jobs = self._scheduler.get_jobs()
        scheduled_jobs = []
        
        for job in jobs:
            scheduled_jobs.append({
                'id': job.id,
                'next_run_time': job.next_run_time,
                'args': job.args,
                'trigger': str(job.trigger)
            })
            
        return scheduled_jobs
