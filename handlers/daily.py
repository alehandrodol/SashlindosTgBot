# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import logging
import pytz
from datetime import datetime

# –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from sqlalchemy import select, and_, update, func, or_, case
from aiogram.utils.markdown import hbold
from core.vk_handler import VKHandler

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from database.models import SchedulerTask, TaskType, User, UserStats

router = Router()

@router.message(Command("daily_status"))
async def cmd_daily_status(message: Message, session):
    if message.chat.type == 'private':
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö!")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ –ú–°–ö
        moscow_tz = pytz.timezone('Europe/Moscow')
        now = datetime.now(moscow_tz)
        today_start = now.replace(hour=0, minute=0, second=0, microsecond=0)
        
        # –ò—â–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        query = select(SchedulerTask).where(
            and_(
                SchedulerTask.chat_id == message.chat.id,
                SchedulerTask.task_type == TaskType.DAILY_MESSAGE,
                SchedulerTask.scheduled_time >= today_start,
                SchedulerTask.scheduled_time <= now,
                SchedulerTask.is_completed == True
            )
        )
        
        result = await session.execute(query)
        completed_task = result.scalar_one_or_none()
        
        if completed_task:
            completed_time = completed_task.scheduled_time.astimezone(moscow_tz)
            await message.answer(
                f"–õ–æ–∫–∞—Ç–æ—Ä –ø–∏–¥–æ—Ä–æ–≤ —É–∂–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω —Å–µ–≥–æ–¥–Ω—è –≤ {completed_time.strftime('%H:%M')} üéâ"
            )
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            query = select(SchedulerTask).where(
                and_(
                    SchedulerTask.chat_id == message.chat.id,
                    SchedulerTask.task_type == TaskType.DAILY_MESSAGE,
                    SchedulerTask.scheduled_time >= now,
                    SchedulerTask.scheduled_time <= now.replace(hour=23, minute=59, second=59),
                    SchedulerTask.is_completed == False
                )
            )
            
            result = await session.execute(query)
            pending_task = result.scalar_one_or_none()
            
            if pending_task:
                await message.answer(
                    f"–õ–æ–∫–∞—Ç–æ—Ä –ø–∏–¥–æ—Ä–æ–≤ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –∂–¥–∏—Ç–µ ‚è∞"
                )
            else:
                await message.answer(
                    "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ü§î"
                )

    except Exception as e:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        logging.error(f"Error in cmd_daily_status: {e}")

class DailyHandler:
    async def _get_user_by_id(self, session, user_id: int, chat_id: int) -> User | None:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∏ —á–∞—Ç—É."""
        query = select(User).where(
            and_(
                User.user_id == user_id,
                User.chat_id == chat_id
            )
        )
        result = await session.execute(query)
        return result.scalar_one_or_none()

    async def _update_user_rating(self, session, user_id: int, rating_delta: int):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        await session.execute(
            update(UserStats)
            .where(UserStats.id == user_id)
            .values(rating=UserStats.rating + rating_delta)
        )

    async def _get_random_users(self, session, chat_id: int, limit: int = 2) -> list[User]:
        """–í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —á–∞—Ç–∞."""
        query = select(User).where(
            and_(
                User.chat_id == chat_id,
                User.is_active == True
            )
        ).order_by(func.random()).limit(limit)
        
        result = await session.execute(query)
        return result.scalars().all()

    async def _update_master_slave_stats(self, session, master_id: int, slave_id: int):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ daily."""
        await session.execute(
            update(UserStats)
            .where(
                or_(
                    UserStats.id == master_id,
                    UserStats.id == slave_id
                )
            )
            .values(
                master_count=case(
                    (UserStats.id == master_id, UserStats.master_count + 1),
                    else_=UserStats.master_count
                ),
                slave_count=case(
                    (UserStats.id == slave_id, UserStats.slave_count + 1),
                    else_=UserStats.slave_count
                ),
                rating=case(
                    (UserStats.id == master_id, UserStats.rating + 100),
                    (UserStats.id == slave_id, UserStats.rating + 50),
                    else_=UserStats.rating
                )
            )
        )

    def _format_result_message(self, master: User, slave: User) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏."""
        master_username = f"@{master.username}" if master.username else f"ID: {master.user_id}"
        slave_username = f"@{slave.username}" if slave.username else f"ID: {slave.user_id}"
        
        return (
            f"üéØ –õ–æ–∫–∞—Ç–æ—Ä –æ–±–Ω–∞—Ä—É–∂–∏–ª:\n\n"
            f"üëë {hbold('–ü–∏–¥–æ—Ä –¥–Ω—è')}: {master_username}!\n"
            f"üîó {hbold('–ü–∞—Å—Å–∏–≤ –¥–Ω—è')}: {slave_username}!\n"
        )

@router.callback_query(F.data == "daily_first")
async def handle_daily_first(callback: CallbackQuery, session, vk_handler: VKHandler):
    handler = DailyHandler()
    try:
        chat_id = callback.message.chat.id
        user_id = callback.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥
        user = await handler._get_user_by_id(session, user_id, chat_id)
        if not user:
            await callback.message.reply("–í—ã –Ω–µ —É—á–∞–≤—Å—Ç–≤—É–µ—Ç–µ –≤ –ø–æ–∏—Å–∫–µ –ø–∏–¥–æ—Ä–æ–≤! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /addme —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å—Å—è –≤ –ø–æ–∏—Å–∫.")
            return
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        await callback.message.delete()
        
        await handler._update_user_rating(session, user.id, 25)
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        random_users = await handler._get_random_users(session, chat_id)
        if len(random_users) != 2:
            await callback.message.answer("–ö–∞–∂–µ—Ç—Å—è —É –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∏–¥–æ—Ä–æ–≤ –≤ —á–∞—Ç–µ.")
            return
        
        master, slave = random_users
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await handler._update_master_slave_stats(session, master.id, slave.id)
        await session.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ
        photo_url = (await vk_handler.get_random_photo(
            session,
            user_id,
            chat_id
        ))[0]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_message = handler._format_result_message(master, slave)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if photo_url:
            await callback.bot.send_photo(
                chat_id=chat_id,
                photo=photo_url,
                caption=result_message,
                parse_mode="HTML"
            )
        else:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await callback.bot.send_message(
                chat_id=chat_id,
                text=result_message,
                parse_mode="HTML"
            )
        
        logging.info(
            f"–í—ã–±—Ä–∞–Ω—ã master ({master.username}) –∏ slave ({slave.username}) "
            f"–≤ —á–∞—Ç–µ {chat_id}"
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏: {e}")
        raise e 