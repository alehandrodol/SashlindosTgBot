from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from sqlalchemy import select
import logging

from database.models import User, UserStats

router = Router()

class StatsHandler:
    @staticmethod
    async def _get_chat_users_stats(
        session,
        chat_id: int,
        order_by_field = UserStats.rating
    ) -> list[tuple[User, UserStats]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–∞—Ç–∞ —Å –∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π.
        
        Args:
            session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            chat_id: ID —á–∞—Ç–∞
            order_by_field: –ü–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é rating)
        
        Returns:
            list[tuple[User, UserStats]]: –°–ø–∏—Å–æ–∫ –ø–∞—Ä (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
        """
        query = (
            select(User, UserStats)
            .join(UserStats, User.id == UserStats.id)
            .where(User.chat_id == chat_id)
            .order_by(
                User.is_active.desc(),  # –°–Ω–∞—á–∞–ª–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ
                order_by_field.desc()   # –ó–∞—Ç–µ–º –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–æ–ª—é
            )
        )
        result = await session.execute(query)
        return result.all()

    @staticmethod
    def _format_stats_line(
        user: User,
        stats: UserStats,
        is_command_user: bool,
        field: str = 'rating'
    ) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            is_command_user: –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–∑–≤–∞–≤—à–∏–º –∫–æ–º–∞–Ω–¥—É
            field: –ü–æ–ª–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ('rating', 'master_count', 'slave_count')
        """
        name = user.username or f"User{user.user_id}"
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏ —Å—É—Ñ—Ñ–∏–∫—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—è
        value = getattr(stats, field)
        suffix = {
            'rating': '–æ—á–∫–æ–≤',
            'master_count': '—Ä–∞–∑(–∞)',
            'slave_count': '—Ä–∞–∑(–∞)'
        }.get(field, '')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        line = f"{name}: {value} {suffix}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–æ—É–Ω–∞ –µ—Å–ª–∏ —ç—Ç–æ –≤—ã–∑–≤–∞–≤—à–∏–π –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if is_command_user:
            line = f"{line} ü§°"
        
        # –ó–∞—á–µ—Ä–∫–∏–≤–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if not user.is_active:
            line = f"{line}"
            
        return line

@router.message(Command("ratings"))
async def cmd_ratings(message: Message, session):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞."""
    if message.chat.type == 'private':
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö!")
        return

    try:
        handler = StatsHandler()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        users_with_stats = await handler._get_chat_users_stats(
            session,
            message.chat.id,
            UserStats.rating
        )
        
        if not users_with_stats:
            await message.reply("–í —ç—Ç–æ–º —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
        lines = ["üìä <b>–†–µ–π—Ç–∏–Ω–≥ –ø–∏–¥–æ—Ä–∞—Å–æ–≤:</b>\n"]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        active_users = [
            handler._format_stats_line(user, stats, user.user_id == message.from_user.id, 'rating')
            for user, stats in users_with_stats
            if user.is_active
        ]
        lines.extend(active_users)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        inactive_users = [
            handler._format_stats_line(user, stats, user.user_id == message.from_user.id, 'rating')
            for user, stats in users_with_stats
            if not user.is_active
        ]
        if inactive_users:
            lines.append("\nüí§ <b>–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∏–¥–æ—Ä–∞—Å—ã:</b>")
            lines.extend(inactive_users)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(
            "\n".join(lines),
            parse_mode="HTML"
        )

    except Exception as e:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞.")
        logging.error(f"Error in cmd_ratings: {e}")

@router.message(Command("masters"))
async def cmd_masters(message: Message, session):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Å—Ç–µ—Ä–æ–≤."""
    if message.chat.type == 'private':
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö!")
        return

    try:
        handler = StatsHandler()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ master_count
        users_with_stats = await handler._get_chat_users_stats(
            session,
            message.chat.id,
            UserStats.master_count
        )
        
        if not users_with_stats:
            await message.reply("–í —ç—Ç–æ–º —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
            return
        
        lines = ["üëë <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∏–¥–æ—Ä–æ–≤ –¥–Ω—è:</b>\n"]
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        active_users = [
            handler._format_stats_line(user, stats, user.user_id == message.from_user.id, 'master_count')
            for user, stats in users_with_stats
            if user.is_active
        ]
        lines.extend(active_users)
        
        # –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        inactive_users = [
            handler._format_stats_line(user, stats, user.user_id == message.from_user.id, 'master_count')
            for user, stats in users_with_stats
            if not user.is_active
        ]
        if inactive_users:
            lines.append("\nüí§ <b>–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∏–¥–æ—Ä–∞—Å—ã:</b>")
            lines.extend(inactive_users)
        
        await message.answer("\n".join(lines), parse_mode="HTML")

    except Exception as e:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Å—Ç–µ—Ä–æ–≤.")
        logging.error(f"Error in cmd_masters: {e}")

@router.message(Command("slaves"))
async def cmd_slaves(message: Message, session):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ–≤."""
    if message.chat.type == 'private':
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö!")
        return

    try:
        handler = StatsHandler()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ slave_count
        users_with_stats = await handler._get_chat_users_stats(
            session,
            message.chat.id,
            UserStats.slave_count
        )
        
        if not users_with_stats:
            await message.reply("–í —ç—Ç–æ–º —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
            return
        
        lines = ["üîó <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Å—Å–∏–≤–æ–≤:</b>\n"]
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        active_users = [
            handler._format_stats_line(user, stats, user.user_id == message.from_user.id, 'slave_count')
            for user, stats in users_with_stats
            if user.is_active
        ]
        lines.extend(active_users)
        
        # –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        inactive_users = [
            handler._format_stats_line(user, stats, user.user_id == message.from_user.id, 'slave_count')
            for user, stats in users_with_stats
            if not user.is_active
        ]
        if inactive_users:
            lines.append("\nüí§ <b>–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∏–¥–æ—Ä–∞—Å—ã:</b>")
            lines.extend(inactive_users)
        
        await message.answer("\n".join(lines), parse_mode="HTML")

    except Exception as e:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ–≤.")
        logging.error(f"Error in cmd_slaves: {e}") 