import logging

from aiogram import Router, F
from aiogram.types import Message, ChatMemberUpdated
from aiogram.filters import Command, ChatMemberUpdatedFilter, IS_NOT_MEMBER, IS_MEMBER

from database.models import Chat, User, UserStats
from sqlalchemy import select
from core.scheduler import Scheduler


router = Router()

@router.message(Command("start"))
async def cmd_start(message: Message, session, scheduler: Scheduler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ."""
    if message.chat.type == 'private':
        await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –≥—Ä—É–ø–ø–æ–≤–æ–π –±–æ—Ç. –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã.")
        return

    try:
        handler = RegistrationHandler()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞
        chat = await handler._get_chat(session, message.chat.id)
        
        if chat:
            await message.reply("–ë–æ—Ç —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ –≥—Ä—É–ø–ø–µ!")
            return
            
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç
        chat = await handler._create_chat(session, message.chat.id)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
        await scheduler.setup_chat_job(chat.chat_id)
        await message.reply("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ –≥—Ä—É–ø–ø–µ!")

    except Exception as e:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ—Ç–∞.")
        logging.error(f"Error in cmd_start: {e}")

class RegistrationHandler:
    @staticmethod
    async def _get_chat(session, chat_id: int) -> Chat | None:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç."""
        query = select(Chat).where(Chat.chat_id == chat_id)
        result = await session.execute(query)
        return result.scalar_one_or_none()

    @staticmethod
    async def _create_chat(session, chat_id: int) -> Chat:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —á–∞—Ç."""
        chat = Chat(chat_id=chat_id)
        session.add(chat)
        await session.commit()
        return chat

    @staticmethod
    async def _get_user(session, user_id: int, chat_id: int) -> User | None:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        query = select(User).where(
            User.user_id == user_id,
            User.chat_id == chat_id
        )
        result = await session.execute(query)
        return result.scalar_one_or_none()

    @staticmethod
    async def _create_user(session, user_id: int, chat_id: int, username: str | None, is_active: bool = True) -> User:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
        new_user = User(
            user_id=user_id,
            chat_id=chat_id,
            username=username,
            is_active=is_active
        )
        session.add(new_user)
        await session.flush()

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        new_stats = UserStats(id=new_user.id)
        session.add(new_stats)
        await session.commit()

        return new_user

    @staticmethod
    async def _deactivate_user(session, user: User) -> bool:
        """–î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ.
        
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω –∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω,
                 False –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –±—ã–ª –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω
        """
        if not user.is_active:
            return False
            
        user.is_active = False
        await session.commit()
        return True

    @staticmethod
    async def _setup_new_chat(session, chat: Chat, scheduler: Scheduler) -> bool:
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π —á–∞—Ç –∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏.
        
        Returns:
            bool: True –µ—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π —á–∞—Ç, False –µ—Å–ª–∏ —á–∞—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª
        """
        if not chat._sa_instance_state.pending:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª
            return False
            
        await session.commit()
        await scheduler.setup_chat_job(chat.chat_id)
        return True

    @staticmethod
    async def _deactivate_chat(session, chat: Chat) -> bool:
        """–î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —á–∞—Ç.
        
        Returns:
            bool: True –µ—Å–ª–∏ —á–∞—Ç –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω –∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω,
                 False –µ—Å–ª–∏ —á–∞—Ç —É–∂–µ –±—ã–ª –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω
        """
        if not chat.is_active:
            return False
            
        chat.is_active = False
        await session.commit()
        return True

@router.message(Command("addme"))
async def cmd_addme(message: Message, session):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ."""
    if message.chat.type == 'private':
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö!")
        return

    try:
        handler = RegistrationHandler()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞
        chat = await handler._get_chat(session, message.chat.id)
        if not chat:
            await message.reply("–≠—Ç–æ—Ç —á–∞—Ç –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await handler._get_user(session, message.from_user.id, message.chat.id)

        if user:
            if not user.is_active:
                user.is_active = True
                await session.commit()
                await message.reply("–í—ã —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ!")
                return
            await message.reply("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ!")
            return

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await handler._create_user(
            session,
            message.from_user.id,
            message.chat.id,
            message.from_user.username,
            is_active=True
        )

        await message.reply("–¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")

    except Exception as e:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        logging.error(f"Error in cmd_addme: {e}")

@router.message(Command("disableme"))
async def cmd_disableme(message: Message, session):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ."""
    if message.chat.type == 'private':
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö!")
        return

    try:
        handler = RegistrationHandler()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await handler._get_user(session, message.from_user.id, message.chat.id)

        if not user:
            await message.reply("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ!")
            return
        
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if await handler._deactivate_user(session, user):
            await message.reply("–í—ã —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /addme —á—Ç–æ–±—ã —Å–Ω–æ–≤–∞ —Å—Ç–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º.")
        else:
            await message.reply("–í—ã —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ!")

    except Exception as e:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏.")
        logging.error(f"Error in cmd_disableme: {e}")

@router.chat_member(ChatMemberUpdatedFilter(IS_NOT_MEMBER))
async def member_leave_chat(event: ChatMemberUpdated, session):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∫–æ–≥–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —É–¥–∞–ª—è—é—Ç –∏–ª–∏ –æ–Ω –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ —á–∞—Ç–∞."""
    try:
        handler = RegistrationHandler()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await handler._get_user(session, event.old_chat_member.user.id, event.chat.id)
        
        if user:
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await handler._deactivate_user(session, user)
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username or user.user_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ —á–∞—Ç–µ {event.chat.id}")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}")

@router.chat_member(ChatMemberUpdatedFilter(IS_MEMBER))
async def member_join_chat(event: ChatMemberUpdated):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∫–æ–≥–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ —á–∞—Ç—É."""
    try:

        username = event.new_chat_member.user.username or event.new_chat_member.user.first_name
        await event.bot.send_message(
            chat_id=event.chat.id,
            text=f"–ü—Ä–∏–≤–µ—Ç, {username}! üëã\n\n"
                    f"–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ø–æ–∏—Å–∫–µ –ø–∏–¥–æ—Ä–∞—Å–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /addme"
        )
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}")

@router.my_chat_member(ChatMemberUpdatedFilter(IS_NOT_MEMBER))
async def bot_removed_from_chat(event: ChatMemberUpdated, session):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∫–æ–≥–¥–∞ –±–æ—Ç–∞ —É–¥–∞–ª—è—é—Ç –∏–∑ —á–∞—Ç–∞."""
    try:
        handler = RegistrationHandler()
        
        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç
        chat = await handler._get_chat(session, event.chat.id)
        
        if chat:
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —á–∞—Ç
            await handler._deactivate_chat(session, chat)
            logging.info(f"–ë–æ—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ —á–∞—Ç–∞ {event.chat.id}, —á–∞—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞ –∏–∑ —á–∞—Ç–∞: {e}")

@router.my_chat_member(ChatMemberUpdatedFilter(IS_MEMBER))
async def bot_added_to_chat(event: ChatMemberUpdated, session):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∫–æ–≥–¥–∞ –±–æ—Ç–∞ –¥–æ–±–∞–≤–ª—è—é—Ç –≤ —á–∞—Ç."""
    try:
        handler = RegistrationHandler()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞
        chat = await handler._get_chat(session, event.chat.id)
        
        if chat:
            # –ï—Å–ª–∏ —á–∞—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ–≥–æ
            chat.is_active = True
            await session.commit()
            await event.bot.send_message(
                chat_id=event.chat.id,
                text="–Ø –≤–µ—Ä–Ω—É–ª—Å—è –∏–∑ –Ω–µ–±—ã—Ç–∏—è, –¥–∞-–¥–∞ - —è! üòà"
            )
            logging.info(f"–ë–æ—Ç —Ä–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º —á–∞—Ç–µ {event.chat.id}")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ —á–∞—Ç: {e}")